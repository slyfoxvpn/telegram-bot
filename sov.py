import asyncio
import logging
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
# from config_reader import config
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject, StateFilter
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import string
username = ''

# Finale State Machine Class
class FSM(StatesGroup):
    register_username_state = State()
    register_password_state = State()

# Username validation
# Rules: A-Z, a-z, 0-9, "_", "-"
allowed_symbols_list = [chr(i) for i in range(65, 91)] + [chr(i) for i in range(97, 123)] + [str(i) for i in range(10)] + ['_', '-']
def username_valid(username):
    for char in username:
        if char not in allowed_symbols_list:
            return False
    return True

# Password validation
# Rules: greater than min_len, less than max_len, at least 1 letter, 1 digit and 1 special symbol
def password_valid(password):
    min_len = 10
    max_len = 64
    if len(password) < min_len:
        return False
    elif len(password) > max_len:
        return False
    elif not any(char.isalpha() or char.isdigit() for char in password):
        return False
    for char in password:
        if char in string.punctuation:
            return True
    return False

# Init bot
logging.basicConfig(level=logging.INFO) # Enable logging
# bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="Markdown")
bot = Bot(token='5460754777:AAE5kuh4WBE9WljuYrhxB8cpjx7zGPPCYkg', parse_mode="Markdown")
dp = Dispatcher()


# 'start' with auth code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'auth_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    auth_id = command.args.split("_")[1]
    # Some post to the database to link auth_id and telegram user id
    global username
    username = '' # Request to the database to get username
    print(f"Auth with {auth_id}")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ])
    await message.answer(f'–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ {username}!', reply_markup=keyboard)


# 'start' with ref code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'ref_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    ref_id = command.args.split("_")[1]
    print(f"Ref from {ref_id}")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data='auth')]
    ])
    await message.answer(f'–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!', reply_markup=keyboard)


# 'start' default handler
@dp.message(F.text, CommandStart())
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data='auth')],
        [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–£–î–ê–õ–ò–¢–¨ –ü–†–ò –†–ï–õ–ò–ó–ï)", callback_data='main_menu')]
    ])
    await message.answer("*–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ SlyFox ü¶ä\n–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.*", reply_markup=keyboard)


# Auth
@dp.callback_query(lambda c: c.data == 'auth')
async def callback_query_handler_auth(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í—Ö–æ–¥", callback_data='login')],
        [types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')]
    ])
    await bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ:", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)


# Login
@dp.callback_query(lambda c: c.data == 'login')
async def callback_query_handler_login(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url='example.com/gettglink')]
    ])
    await bot.edit_message_text(text="–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)


# Register
@dp.callback_query(lambda c: c.data == 'register', StateFilter(None))
async def callback_query_handler_register(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω: ", chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await state.set_state(FSM.register_username_state)

# Username input
@dp.message(FSM.register_username_state)
async def register_username_input(message: Message, state: FSMContext):
    if not username_valid(message.text):
        await message.answer('–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–∏–º–≤–æ–ª—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç A-Z a-z 0-9 "_" "-" '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
        return None
    elif False: # Check username in database
        await message.answer('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return None
    # Some other checks
    global username
    username = message.text
    await message.answer('–£—Å–ø–µ—Ö! \n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ')
    await state.set_state(FSM.register_password_state)

# Password input
@dp.message(FSM.register_password_state)
async def register_password_input(message: Message, state: FSMContext):
    if not password_valid(message.text):
        await message.answer('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 64, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
        return None
    # Some other checks
    # Some post to the database to write a new account and link with telegram
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ])
    await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ {username}!',  reply_markup=keyboard)
    await state.clear()


# Main munu
@dp.callback_query(lambda c: c.data == 'main_menu')
async def callback_query_handler_main_menu(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –õ–æ–∫–∞—Ü–∏–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data='individual')]
    ])
    await bot.edit_message_text("*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# All products code
@dp.callback_query(lambda c: c.data == 'all_products')
async def callback_query_handler_all_product(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç - –æ—Ç 150 ‚ÇΩ", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="üè≥Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä", callback_data='individual')]
    ])
    await bot.edit_message_text("*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for germany_srv
@dp.callback_query(lambda c: c.data == 'germany_srv')
async def callback_query_handler(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (10 GB) - 150 ‚ÇΩ / mo", callback_data='germany_srv_10')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (20 GB) - 250 ‚ÇΩ / mo", callback_data='germany_srv_20')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (40 GB) - 400 ‚ÇΩ / mo", callback_data='germany_srv_40')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (‚àû GB) - 550 ‚ÇΩ / mo", callback_data='germany_srv_unlimited')],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_all_products')]
    ])
    await bot.edit_message_text(text="*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for individual
@dp.callback_query(lambda c: c.data == 'individual')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')
    await bot.answer_callback_query(callback_query.id)


# Back to all products handler
@dp.callback_query(lambda c: c.data == 'back_to_all_products')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await callback_query_handler_all_product(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())