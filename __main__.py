import asyncio
import logging
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from config_reader import config
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery
import builders


logging.basicConfig(level=logging.INFO) # Enable logging
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="Markdown") # Bot init
dp = Dispatcher() # Dispatcher (?)


# 'start' with auth code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'auth_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    auth_id = command.args.split("_")[1]
    await message.answer(f"Auth with {auth_id}")


# 'start' with ref code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'ref_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    ref_id = command.args.split("_")[1]
    await message.answer(f"Ref from {ref_id}")


# 'start' default handler
@dp.message(F.text, CommandStart())
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data='auth')],
        [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–£–î–ê–õ–ò–¢–¨ –ü–†–ò –†–ï–õ–ò–ó–ï)", callback_data='main_menu')]
    ])
    await message.answer("*–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ SlyFox ü¶ä\n–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.*", reply_markup=keyboard)


# Main munu
@dp.callback_query(lambda c: c.data == 'main_menu')
async def callback_query_handler_main_menu(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –õ–æ–∫–∞—Ü–∏–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data='account_settings')]
    ])
    await bot.edit_message_text("*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Main munu
@dp.callback_query(lambda c: c.data == 'account_settings')
async def callback_query_handler_account_settings(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (Language)", callback_data='change_language')],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')]
    ])
    await bot.edit_message_text("*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# All products code
@dp.callback_query(lambda c: c.data == 'all_products')
async def callback_query_handler_all_product(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç - –æ—Ç 150 ‚ÇΩ", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="üè≥Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä", callback_data='individual')],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')]
    ])
    await bot.edit_message_text("*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for germany_srv
@dp.callback_query(lambda c: c.data == 'germany_srv')
async def callback_query_handler_germany_srv(callback_query: types.CallbackQuery):
    keyboard = builders.keyboard_builder(country_flag="üá©üá™", country_name="germany")
    await bot.edit_message_text(text="*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for germany_srv_10
@dp.callback_query(lambda c: c.data == 'germany_srv_10')
async def callback_query_handler(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url="https://www.tinkoff.ru/")],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_germany_srv')]
    ])
    await bot.edit_message_text(text="*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for individual
@dp.callback_query(lambda c: c.data == 'individual')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ –ª—é–±–æ–π –∏–∑ 12 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π. –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ª–∏—à—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π.')
    await bot.answer_callback_query(callback_query.id)


# Back to main menu
@dp.callback_query(lambda c: c.data == 'back_to_main_menu')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await callback_query_handler_main_menu(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id)


# Back to all products handler
@dp.callback_query(lambda c: c.data == 'back_to_all_products')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await callback_query_handler_all_product(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id)


# Back to all germany_srv handler
@dp.callback_query(lambda c: c.data == 'back_to_germany_srv')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await callback_query_handler_germany_srv(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())