import asyncio
import logging
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from config_reader import config
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery


logging.basicConfig(level=logging.INFO) # Enable logging
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="Markdown") # Bot init
dp = Dispatcher() # Dispatcher (?)


# 'start' with auth code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'auth_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    auth_id = command.args.split("_")[1]
    await message.answer(f"Auth with {auth_id}")


# 'start' with ref code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'ref_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    ref_id = command.args.split("_")[1]
    await message.answer(f"Ref from {ref_id}")


# 'start' default handler
@dp.message(F.text, CommandStart())
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="‚ùî‚ùì–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")],
    ], resize_keyboard=True, input_field_placeholder="–î–µ–Ω–∏—Å –¥–µ–Ω–∏—Å–æ—á–∫–∞")

    await message.answer("*–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ SlyFox.\n–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.*")
    await message.answer("", reply_markup=keyboard)

# Main munu
@dp.message(F.text, Command("Menu"))
async def all_products(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóÉÔ∏è –õ–æ–∫–∞—Ü–∏–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data='individual')]
    ])
    await message.answer("*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=keyboard)


# All products code
@dp.callback_query(lambda c: c.data == 'all_products')
async def callback_query_handler_all_product(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç - –æ—Ç 200 ‚ÇΩ", callback_data='germany_srv')],
        [types.InlineKeyboardButton(text="üè≥Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä", callback_data='individual')]
    ])
    await bot.edit_message_text("*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for germany_srv
@dp.callback_query(lambda c: c.data == 'germany_srv')
async def callback_query_handler(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (10 GB) - 150 ‚ÇΩ / mo", callback_data='germany_srv_10')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (20 GB) - 250 ‚ÇΩ / mo", callback_data='germany_srv_20')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (40 GB) - 400 ‚ÇΩ / mo", callback_data='germany_srv_40')],
        [types.InlineKeyboardButton(text="üá©üá™ –¢–∞—Ä–∏—Ñ Lite (‚àû GB) - 550 ‚ÇΩ / mo", callback_data='germany_srv_unlimited')],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_all_products')]
    ])

    await bot.edit_message_text(text="*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç:*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


# Callback query for individual
@dp.callback_query(lambda c: c.data == 'individual')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')
    await bot.answer_callback_query(callback_query.id)


# Back to all products handler
@dp.callback_query(lambda c: c.data == 'back_to_all_products')
async def callback_query_handler(callback_query: types.CallbackQuery):
    await callback_query_handler_all_product(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id)


# –Ø —Ö–æ—Ç–µ–ª –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–æ, –Ω–æ —á–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
# @dp.message(CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'auth_(\d+)'))))
# async def cmd_start(message: types.Message, command: None):
#     if command and command.args:
#         auth_number = command.args.split("_")[1]
#         await message.answer(f"*–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ {auth_number}.*")
#     else:
#         await message.answer("*–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ SlyFox.*")

#     await message.answer("ü¶ä")


# @dp.message(F.text, Command("admin"))
# async def adm(message: types.Message):
#     if (message.chat.id == 1826617805):
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())