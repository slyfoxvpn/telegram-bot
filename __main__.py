import asyncio
import logging
import os
import re
import time
from uuid import uuid4
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
#from readers.config_reader import config
from aiogram import F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery
#import builders.location_and_tariffs_builder as location_and_tariffs_builder
#from readers.language_reader import LanguageManager
#from aiogram.fsm.storage.memory import MemoryStorage
#from aiogram.dispatcher import FSMContext



load_dotenv() # Load .env
TOKEN = os.getenv("BOT_TOKEN") # Load secret token from .env
TECHINCAL_SUPPORT_ID = os.getenv("TECHINCAL_SUPPORT_ID")


logging.basicConfig(level=logging.INFO) # Enable logging
bot = Bot(token=TOKEN, parse_mode="Markdown") # Bot init
dp = Dispatcher() # Dispatcher (?)


# 'start' with auth code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'auth_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    auth_id = command.args.split("_")[1]
    await message.answer(f"Started with: auth:code@{auth_id}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CallbackQuery –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_query_main_menu
    callback_query = types.CallbackQuery(
        id=str(uuid4()),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ id –≤ —Å—Ç—Ä–æ–∫—É
        from_user=message.from_user,
        chat_instance=str(message.chat.id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ chat_instance –≤ —Å—Ç—Ä–æ–∫—É
        message=message,
        data='main_menu'
    )

    # –í—ã–∑—ã–≤–∞–µ–º callback_query_main_menu
    await callback_query_main_menu(callback_query)


# 'start' with ref code (if exist)
@dp.message(F.text, CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'ref_(\d+)'))))
async def cmd_start(message: Message, command: CommandObject):
    ref_id = command.args.split("_")[1]
    await message.answer(f"Started with: referal:code@{ref_id}")


# 'start' default handler
@dp.message(F.text, CommandStart())
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–° —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞", callback_data='main_menu')], # Sign up
        [types.InlineKeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", url=f"https://tgc.slyfoxvpn.ru/auth?id={message.from_user.id}")], # tgc - telegram connect feature
        [types.InlineKeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç adm", url=f"https://t.me/slyfoxvpn_bot?start=auth_3784242393")]

    ])
    
    await message.answer(f"*–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ê–ª–∏—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã SlyFox ü¶ä\n\n–Ø —Å–ª–µ–∂—É –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –≤–∞—à–µ–π —Å–µ—Ç–∏ –∏ –Ω–µ –¥–∞—é –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –ø–æ–ø–∞—Å—Ç—å –≤ —Ä—É–∫–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.\n\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è!*", reply_markup=keyboard)


# 'group test'
@dp.message(F.text, Command(prefix="/", commands=["test"]))
async def group_test(message: Message):
    chat_id = TECHINCAL_SUPPORT_ID # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
    await bot.send_message(chat_id, "Hello")


# Callback query for main menu
@dp.callback_query(lambda c: c.data == 'main_menu')
async def callback_query_main_menu(callback_query: types.CallbackQuery):
    account_linked = True

    if (account_linked):
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data='subscription')],
            [types.InlineKeyboardButton(text="‚ùì –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='technical_support')],
            [types.InlineKeyboardButton(text="ü¶ä –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=f"https://tgc.slyfoxvpn.ru/auth?id={callback_query.from_user.id}")] # tgc - telegram connect feature
        ])
    else:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data='subscription')],
            [types.InlineKeyboardButton(text="‚ùì –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='technical_support')],
            [types.InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", url=f"https://tgc.slyfoxvpn.ru/link?id={callback_query.from_user.id}")] # tgc - telegram connect feature
        ])

    try:
        await bot.edit_message_text(text="*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è? üöÄ*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    except TelegramBadRequest:
        await bot.send_message(text="*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è? üöÄ*", reply_markup=keyboard, chat_id=callback_query.from_user.id)

    await bot.answer_callback_query(callback_query.id) # Answer to query


# technical_support
@dp.callback_query(lambda c: c.data == 'technical_support')
async def callback_query_technical_support(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")], # tgc - telegram connect feature
    ])

    await bot.edit_message_text(text="*–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å—É. –°–æ–≤–µ—Ç—É–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –Ω–∞—à–µ–π FAQ - —Ç–∞–º –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n–ù–∏–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∂–∞—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id) # Answer to query
    

# Subscription
@dp.callback_query(lambda c: c.data == 'subscription')
async def callback_query_subscription(callback_query: types.CallbackQuery):
    subscription_is = False

    if (subscription_is):
        date_out = "10.02.2024"
        date_object = datetime.strptime(date_out, "%d.%m.%Y")
        formatted_date = date_object.strftime("%d %B %Y –≥–æ–¥–∞")

        date_one_line = datetime.strptime("10.02.2024", "%d.%m.%Y").strftime("%d %B %Y –≥–æ–¥–∞")

        price = 250.00
        balance = 500.00
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üóì –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='renew_subscription')],
            [types.InlineKeyboardButton(text="üî∏ –£–ø—Ä–∞–≤–ª—è—Ç—å —É—Ä–æ–≤–Ω—è–º–∏", callback_data='subscription_level_manage')],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='update_subscription'), types.InlineKeyboardButton(text="üóÉÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")], # tgc - telegram connect feature
        ])

        await bot.edit_message_text(text=f"*ü¶ä –¢–∞—Ä–∏—Ñ: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π*\n\n*üóì –î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {date_one_line}*\n\n*üí≥ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ*\n*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {price}‚ÇΩ*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

    else:
        balance = 250.00

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üóì –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data='list_of_subscriptions')],
            [types.InlineKeyboardButton(text="üî∏ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='f')],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='update_subscription'), types.InlineKeyboardButton(text="üóÉÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")], # tgc - telegram connect feature
        ])

        await bot.edit_message_text(text=f"*ü¶ä –£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.*\n\n*üí≥ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)


    await bot.answer_callback_query(callback_query.id) # Answer to query


@dp.callback_query(lambda c: c.data == 'list_of_subscriptions')
async def callback_query_list_of_subscriptions(callback_query: types.CallbackQuery):

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü—Ä–æ–±–Ω—ã–π (30‚ÇΩ / 1 –¥–µ–Ω—å)", callback_data='l')],
        [types.InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (250‚ÇΩ / 30 –¥–Ω–µ–π)", callback_data='l')],
        [types.InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π (500‚ÇΩ / 30 –¥–Ω–µ–π)", callback_data='k')],
        #[types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π (799‚ÇΩ / 30 –¥–Ω–µ–π)", callback_data='k')],
        #[types.InlineKeyboardButton(text="–°—Ä–∞–≤–Ω–∏—Ç—å –ø–ª–∞–Ω—ã", callback_data='k')],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='subscription')],

    ])

    await bot.edit_message_text(
        text=f"""**–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:**
        
*–¢–∞—Ä–∏—Ñ –ü—Ä–æ–±–Ω—ã–π 
(30‚ÇΩ / 1 –¥–µ–Ω—å)*

üìà –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
‚ôæ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞
üíª –î–æ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
üè≥Ô∏è –û–¥–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∞

*–¢–∞—Ä–∏—Ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 
(8,3‚ÇΩ / 1 –¥–µ–Ω—å)* \*

üìà –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
‚ôæ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞
üíª –î–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
üö© –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –Ω–∞ –≤—ã–±–æ—Ä

*–¢–∞—Ä–∏—Ñ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π 
(16,6‚ÇΩ / 1 –¥–µ–Ω—å)* \*

üìà –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
‚ôæ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞
üë• –ù–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å –≤–∞–º–∏ –Ω–µ –±–æ–ª—å—à–µ 2 –¥—Ä—É–≥–∏—Ö —á–µ–ª–æ–≤–µ–∫
üíª –î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
üõ°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã
‚úÖ –ü—Ä–∏–æ—Ä–µ—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
üö© –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –Ω–∞ –≤—ã–±–æ—Ä

__\* –¶–µ–Ω–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ 30 –¥–Ω–µ–π__""",
        reply_markup=keyboard,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id)


    #await bot.edit_message_text(text=f"*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n*–ü—Ä–æ–±–Ω—ã–π (30‚ÇΩ / 1 –¥–µ–Ω—å)*\n- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏.*\n- –î–æ 1-–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n*- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫*\n", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

    await bot.answer_callback_query(callback_query.id) # Answer to query




# Subscription level manage
@dp.callback_query(lambda c: c.data == 'subscription_level_manage')
async def callback_query_subscription_level_manage(callback_query: types.CallbackQuery):
    balance = 500.00
    price = 500.00

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data='renew_subscription')],
        [types.InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data='subscription')],
        [types.InlineKeyboardButton(text="üóÉÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")], # tgc - telegram connect feature
    ])

    await bot.edit_message_text(text=f"*ü¶ä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: üåüüåüüåü*\n\n*üí≥ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ*\n*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {price}‚ÇΩ*\n\n*–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Å—Ç–∞–≤—à–∞—è—Å—è —Ä–∞–∑–Ω–∏—Ü–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è.\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–Ω–∏–∂–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ - –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∞–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –±—É–¥–µ–º –∏–∑–º–µ–Ω–Ω–∞ –Ω–∞ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.\n\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑ –≤ 3 –¥–Ω—è.*", reply_markup=keyboard, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id) # Answer to query


# Update subscription
@dp.callback_query(lambda c: c.data == 'update_subscription')
async def callback_query_update_subscription(callback_query: types.CallbackQuery):
    await bot.edit_message_text(text=f"*üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..*", reply_markup=None, chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    
    time.sleep(0.5) # Timeout
    
    await callback_query_subscription(callback_query=callback_query)
    await bot.answer_callback_query(callback_query.id) # Answer to query


# Ignore other type
@dp.message(F.photo)
async def cmd_start(message: types.Message):
    await message.reply(f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–æ –º–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —Ç–∞–º —É –≤–∞—Å üì∏ü¶ä")


@dp.message(F.video)
async def cmd_start(message: types.Message):
    await message.reply(f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–∑–ª–∏—á–∞—Ç—å –≤–∏–¥–µ–æ, –Ω–æ –º–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —Ç–∞–º —É –≤–∞—Å üé•ü¶ä")


@dp.message(F.video_note)
async def cmd_start(message: types.Message):
    await message.reply(f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–∑–ª–∏—á–∞—Ç—å –≤–∏–¥–µ–æ, –Ω–æ –º–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —Ç–∞–º —É –≤–∞—Å üé•ü¶ä")


@dp.message(F.audio)
async def cmd_start(message: types.Message):
    await message.reply(f"–í—ã —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª–∏? –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—Å—å–µ–º! –§—Ä-—Ñ—Ä üîäü¶ä")


@dp.message(F.voice)
async def cmd_start(message: types.Message):
    await message.reply(f"–í—ã —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª–∏? –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—Å—å–µ–º! –§—Ä-—Ñ—Ä üîäü¶ä")


@dp.message(F.document)
async def cmd_start(message: types.Message):
    await message.reply(f"–î–æ–∫—É–º–µ–Ω—Ç—ã? –°–ª–æ–∂–Ω–æ –∏ —Å–∫—É—á–Ω–æ. –û—Å—Ç–∞–≤–ª—é —ç—Ç–æ —Å–≤–æ–µ–º—É —é—Ä–∏—Å—Ç—É üìÑü¶ä")


@dp.message(F.location)
async def cmd_start(message: types.Message):
    await message.reply(f"–í–æ—É, –∫—É–¥–∞ —ç—Ç–æ –≤–∞—Å –∑–∞–Ω–µ—Å–ª–æ? –ö–∞–∫ —Ç–∞–º –ø–æ–≥–æ–¥–∫–∞? üìçü¶ä")


@dp.message(F.contact)
async def cmd_start(message: types.Message):
    await message.reply(f"–Ø –Ω–µ –º–æ–≥—É —Ä–∞–∑–ª–∏—á–∞—Ç—å –Ω–æ–º–µ—Ä–∞, –Ω–æ –Ω–∞–¥–µ—é—Å—å, –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ SlyFox VPN —ç—Ç–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ –º–µ–Ω—è üë§ü¶ä")


# Start the process of polling new updates
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


    # üåü - 30 —Ä—É–±–ª–µ–π –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ–¥–∏–Ω IP –∞–¥—Ä–µ—Å—Å
# üåüüåü - –¢–∞—Ä–∏—Ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, 30 –¥–Ω–µ–π, 250 —Ä—É–±–ª–µ–π, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ (–ø–æ–∑–∂–µ), –¥–æ 2-—É—Ö IP –∞–¥—Ä–µ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∞
# üåüüåüüåü - –¢–∞—Ä–∏—Ñ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π, 30 –¥–Ω–µ–π, 500 —Ä—É–±–ª–µ–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ –≤—Å–µ—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö (–ø–æ–∑–∂–µ), –¥–æ 5-—Ç–∏ IP –∞–¥—Ä–µ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∫–ª–∞–º—ã, –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤—ã–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã